{"version":3,"sources":["webpack://Ruler/webpack/universalModuleDefinition","webpack://Ruler/webpack/bootstrap","webpack://Ruler/./node_modules/rxjs/Observable.js","webpack://Ruler/external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack://Ruler/./node_modules/rxjs/Subscriber.js","webpack://Ruler/external {\"root\":\"PropTypes\",\"commonjs2\":\"prop-types\",\"commonjs\":\"prop-types\",\"amd\":\"prop-types\"}","webpack://Ruler/./node_modules/rxjs/util/root.js","webpack://Ruler/./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack://Ruler/./node_modules/rxjs/util/isFunction.js","webpack://Ruler/./node_modules/rxjs/Subscription.js","webpack://Ruler/./node_modules/rxjs/util/errorObject.js","webpack://Ruler/./node_modules/rxjs/OuterSubscriber.js","webpack://Ruler/./node_modules/rxjs/util/subscribeToResult.js","webpack://Ruler/./node_modules/rxjs/observable/merge.js","webpack://Ruler/./node_modules/rxjs/util/isScheduler.js","webpack://Ruler/./node_modules/rxjs/util/isArray.js","webpack://Ruler/./node_modules/rxjs/util/isObject.js","webpack://Ruler/./node_modules/rxjs/util/tryCatch.js","webpack://Ruler/./node_modules/rxjs/Observer.js","webpack://Ruler/./node_modules/rxjs/symbol/rxSubscriber.js","webpack://Ruler/./node_modules/rxjs/symbol/observable.js","webpack://Ruler/./node_modules/rxjs/observable/EmptyObservable.js","webpack://Ruler/./node_modules/rxjs/operators/mergeMap.js","webpack://Ruler/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://Ruler/./node_modules/@babel/runtime/helpers/createClass.js","webpack://Ruler/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","webpack://Ruler/./node_modules/@babel/runtime/helpers/getPrototypeOf.js","webpack://Ruler/./node_modules/@babel/runtime/helpers/inherits.js","webpack://Ruler/./node_modules/@babel/runtime/helpers/typeof.js","webpack://Ruler/./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack://Ruler/(webpack)/buildin/global.js","webpack://Ruler/./node_modules/rxjs/util/toSubscriber.js","webpack://Ruler/./node_modules/rxjs/util/UnsubscriptionError.js","webpack://Ruler/./node_modules/rxjs/util/pipe.js","webpack://Ruler/./node_modules/rxjs/util/noop.js","webpack://Ruler/./node_modules/rxjs/add/operator/map.js","webpack://Ruler/./node_modules/rxjs/operator/map.js","webpack://Ruler/./node_modules/rxjs/operators/map.js","webpack://Ruler/./node_modules/rxjs/add/operator/filter.js","webpack://Ruler/./node_modules/rxjs/operator/filter.js","webpack://Ruler/./node_modules/rxjs/operators/filter.js","webpack://Ruler/./node_modules/rxjs/add/operator/catch.js","webpack://Ruler/./node_modules/rxjs/operator/catch.js","webpack://Ruler/./node_modules/rxjs/operators/catchError.js","webpack://Ruler/./node_modules/rxjs/util/isArrayLike.js","webpack://Ruler/./node_modules/rxjs/util/isPromise.js","webpack://Ruler/./node_modules/rxjs/symbol/iterator.js","webpack://Ruler/./node_modules/rxjs/InnerSubscriber.js","webpack://Ruler/./node_modules/rxjs/add/operator/scan.js","webpack://Ruler/./node_modules/rxjs/operator/scan.js","webpack://Ruler/./node_modules/rxjs/operators/scan.js","webpack://Ruler/./node_modules/rxjs/add/operator/do.js","webpack://Ruler/./node_modules/rxjs/operator/do.js","webpack://Ruler/./node_modules/rxjs/operators/tap.js","webpack://Ruler/./node_modules/rxjs/add/operator/merge.js","webpack://Ruler/./node_modules/rxjs/operator/merge.js","webpack://Ruler/./node_modules/rxjs/operators/merge.js","webpack://Ruler/./node_modules/rxjs/observable/ArrayObservable.js","webpack://Ruler/./node_modules/rxjs/observable/ScalarObservable.js","webpack://Ruler/./node_modules/rxjs/operators/mergeAll.js","webpack://Ruler/./node_modules/rxjs/util/identity.js","webpack://Ruler/./node_modules/rxjs/add/operator/concatMap.js","webpack://Ruler/./node_modules/rxjs/operator/concatMap.js","webpack://Ruler/./node_modules/rxjs/operators/concatMap.js","webpack://Ruler/./node_modules/rxjs/add/operator/takeUntil.js","webpack://Ruler/./node_modules/rxjs/operator/takeUntil.js","webpack://Ruler/./node_modules/rxjs/operators/takeUntil.js","webpack://Ruler/./node_modules/rxjs/add/operator/first.js","webpack://Ruler/./node_modules/rxjs/operator/first.js","webpack://Ruler/./node_modules/rxjs/operators/first.js","webpack://Ruler/./node_modules/rxjs/util/EmptyError.js","webpack://Ruler/./node_modules/rxjs/add/operator/elementAt.js","webpack://Ruler/./node_modules/rxjs/operator/elementAt.js","webpack://Ruler/./node_modules/rxjs/operators/elementAt.js","webpack://Ruler/./node_modules/rxjs/util/ArgumentOutOfRangeError.js","webpack://Ruler/./node_modules/rxjs/add/observable/empty.js","webpack://Ruler/./node_modules/rxjs/observable/empty.js","webpack://Ruler/./node_modules/rxjs/add/observable/fromEvent.js","webpack://Ruler/./node_modules/rxjs/observable/fromEvent.js","webpack://Ruler/./node_modules/rxjs/observable/FromEventObservable.js","webpack://Ruler/./node_modules/rxjs/add/observable/timer.js","webpack://Ruler/./node_modules/rxjs/observable/timer.js","webpack://Ruler/./node_modules/rxjs/observable/TimerObservable.js","webpack://Ruler/./node_modules/rxjs/util/isNumeric.js","webpack://Ruler/./node_modules/rxjs/scheduler/async.js","webpack://Ruler/./node_modules/rxjs/scheduler/AsyncAction.js","webpack://Ruler/./node_modules/rxjs/scheduler/Action.js","webpack://Ruler/./node_modules/rxjs/scheduler/AsyncScheduler.js","webpack://Ruler/./node_modules/rxjs/Scheduler.js","webpack://Ruler/./node_modules/rxjs/util/isDate.js","webpack://Ruler/./src/utils/gesture.js","webpack://Ruler/./src/components/ruler/index.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__1__","__WEBPACK_EXTERNAL_MODULE__3__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","root_1","toSubscriber_1","observable_1","pipe_1","Observable","subscribe","this","_isScalar","_subscribe","lift","operator","observable","source","observerOrNext","error","complete","sink","toSubscriber","add","syncErrorThrowable","_trySubscribe","syncErrorThrown","syncErrorValue","err","forEach","next","PromiseCtor","_this","Rx","config","Promise","Error","resolve","reject","subscription","unsubscribe","subscriber","pipe","operations","_i","arguments","length","pipeFromArray","toPromise","x","__extends","b","__","constructor","isFunction_1","Subscription_1","Observer_1","rxSubscriber_1","Subscriber","_super","destinationOrNext","isStopped","destination","empty","isTrustedSubscriber","trustedSubscriber","rxSubscriber","SafeSubscriber","_next","_error","_complete","closed","_unsubscribeAndRecycle","_parent","_parents","Subscription","_parentSubscriber","context","isFunction","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","fn","parent","_unsubscribe","obj","global","__window","__self","self","WorkerGlobalScope","_root","ReferenceError","isArray_1","isObject_1","tryCatch_1","errorObject_1","UnsubscriptionError_1","_subscriptions","errors","hasErrors","index","len","remove","tryCatch","errorObject","e","UnsubscriptionError","flattenUnsubscriptionErrors","isArray","sub","isObject","concat","push","teardown","EMPTY","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","reduce","errs","OuterSubscriber","apply","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","isArrayLike_1","isPromise_1","Observable_1","iterator_1","InnerSubscriber_1","subscribeToResult","outerSubscriber","result","InnerSubscriber","isArrayLike","isPromise","then","setTimeout","iterator","item","done","obs","TypeError","msg","ArrayObservable_1","isScheduler_1","mergeAll_1","merge","observables","concurrent","Number","POSITIVE_INFINITY","scheduler","last","isScheduler","pop","mergeAll","ArrayObservable","schedule","Array","tryCatchTarget","tryCatcher","for","$$rxSubscriber","getSymbolObservable","$$observable","EmptyObservable","dispatch","arg","subscribeToResult_1","OuterSubscriber_1","mergeMap","project","resultSelector","MergeMapOperator","observer","MergeMapSubscriber","hasCompleted","buffer","active","_tryNext","_innerSub","ish","_notifyResultSelector","shift","instance","Constructor","_defineProperties","target","props","descriptor","configurable","writable","protoProps","staticProps","_typeof","assertThisInitialized","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","subClass","superClass","_typeof2","_setPrototypeOf","g","Function","Subscriber_1","nextOrObserver","map","toString","join","stack","message","noop_1","fns","input","prev","noop","map_1","thisArg","MapOperator","MapSubscriber","count","filter_1","filter","predicate","FilterOperator","FilterSubscriber","catch_1","catch","_catch","catchError_1","selector","catchError","CatchOperator","caught","CatchSubscriber","err2","symbolIteratorPonyfill","Set_1","Set","Map_1","Map","keys","getOwnPropertyNames","$$iterator","scan_1","scan","accumulator","seed","hasSeed","ScanOperator","ScanSubscriber","_seed","set","do_1","do","_do","tap_1","tap","DoOperator","DoSubscriber","safeSubscriber","merge_1","merge_2","mergeStatic","ScalarObservable_1","EmptyObservable_1","array","of","ScalarObservable","state","mergeMap_1","identity_1","identity","concatMap_1","concatMap","takeUntil_1","takeUntil","notifier","TakeUntilOperator","TakeUntilSubscriber","first_1","first","defaultValue","EmptyError_1","FirstOperator","FirstSubscriber","_emitted","_tryPredicate","_emit","_tryResultSelector","_emitFinal","EmptyError","elementAt_1","elementAt","ArgumentOutOfRangeError_1","ElementAtOperator","ArgumentOutOfRangeError","ElementAtSubscriber","empty_1","fromEvent_1","fromEvent","FromEventObservable_1","FromEventObservable","sourceObj","eventName","options","undefined","setupSubscription","handler","isNodeList","isHTMLCollection","addEventListener","removeEventListener","isEventTarget","source_1","on","off","isJQueryStyleEventEmitter","source_2","addListener","removeListener","isNodeStyleEventEmitter","source_3","args","timer_1","timer","TimerObservable_1","TimerObservable","isNumeric_1","async_1","isDate_1","dueTime","period","isNumeric","async","isDate","now","initialDelay","val","parseFloat","AsyncAction_1","AsyncScheduler_1","AsyncScheduler","AsyncAction","work","pending","delay","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Action","scheduled","action","Scheduler","SchedulerAction","Date","isNaN","getDragObservables","domItem","preventDefault","event","mouseEventToCoordinate","mouseEvent","clientX","y","clientY","touchEventToCoordinate","touchEvent","changedTouches","mouseDowns","mouseMoves","mouseUps","touchStarts","touchMoves","touchEnds","touchCancels","_starts","_moves","_ends","clicks","holds","dragStartEvent","moveStartsWithDirection","dragEvent","intialDeltaX","initialDeltaY","verticalMoveStarts","Math","abs","horizontalMoveStarts","movesUntilEnds","verticalMoves","horizontalMoves","dragMoves","fastMoveAtEnds","dragEndEvent","lastMovesAtEnds","verticalMoveEnds","horizontalMoveEnds","dragMoveEnds","verticalSwipe","horizontalSwipe","Ruler","classCallCheck_default","possibleConstructorReturn_default","getPrototypeOf_default","transform","offsetWidth","_this$props","start","end","percentage","setState","max","tranformScore","dragVal","_this$props2","onDrag","round","containerWidth","registerDragListener","_assertThisInitialize","assertThisInitialized_default","point","ruler","width","dragObserver","gestureObserver","dragStart","_ref","startPercentage","onDragStart","_ref2","currPercentage","dragEnds","onDragEnd","_ref3","wrapperLeft","getBoundingClientRect","left","console","log","renderRuler","ruleDiv","_this$props3","step","stepWidth","ruleDom","external_root_React_commonjs2_react_commonjs_react_amd_react_default","a","createElement","className","style","mouseListener","_this$state","initialPosition","initialPercentage","diff","addMouseListener","removeMouseListener","nextProps","_this$props4","_this2","_this$props5","ref","list","onMouseDown","onMouseUp","onMouseLeave","PureComponent","propTypes","PropTypes","number","func","string"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"), require(\"prop-types\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\", \"prop-types\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Ruler\"] = factory(require(\"react\"), require(\"prop-types\"));\n\telse\n\t\troot[\"Ruler\"] = factory(root[\"React\"], root[\"PropTypes\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__1__, __WEBPACK_EXTERNAL_MODULE__3__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 89);\n","\"use strict\";\nvar root_1 = require('./util/root');\nvar toSubscriber_1 = require('./util/toSubscriber');\nvar observable_1 = require('./symbol/observable');\nvar pipe_1 = require('./util/pipe');\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @deprecated internal use only */ Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipe_1.pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n//# sourceMappingURL=Observable.js.map","module.exports = __WEBPACK_EXTERNAL_MODULE__1__;","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('./util/isFunction');\nvar Subscription_1 = require('./Subscription');\nvar Observer_1 = require('./Observer');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = Observer_1.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = Observer_1.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    // HACK(benlesh): To resolve an issue where Node users may have multiple\n                    // copies of rxjs in their node_modules directory.\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriber_1.rxSubscriber]();\n                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        this.destination = trustedSubscriber;\n                        trustedSubscriber.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    /** @deprecated internal use only */ Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== Observer_1.empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction_1.isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    /** @deprecated internal use only */ SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber_1.rxSubscriber]);\n}\n//# sourceMappingURL=Subscriber.js.map","module.exports = __WEBPACK_EXTERNAL_MODULE__3__;","\"use strict\";\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\nexports.root = _root;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n//# sourceMappingURL=root.js.map","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","\"use strict\";\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nexports.isFunction = isFunction;\n//# sourceMappingURL=isFunction.js.map","\"use strict\";\nvar isArray_1 = require('./util/isArray');\nvar isObject_1 = require('./util/isObject');\nvar isFunction_1 = require('./util/isFunction');\nvar tryCatch_1 = require('./util/tryCatch');\nvar errorObject_1 = require('./util/errorObject');\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map","\"use strict\";\n// typeof any so that it we don't have to cast when comparing a result to the error object\nexports.errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = (function (_super) {\n    __extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber_1.Subscriber));\nexports.OuterSubscriber = OuterSubscriber;\n//# sourceMappingURL=OuterSubscriber.js.map","\"use strict\";\nvar root_1 = require('./root');\nvar isArrayLike_1 = require('./isArrayLike');\nvar isPromise_1 = require('./isPromise');\nvar isObject_1 = require('./isObject');\nvar Observable_1 = require('../Observable');\nvar iterator_1 = require('../symbol/iterator');\nvar InnerSubscriber_1 = require('../InnerSubscriber');\nvar observable_1 = require('../symbol/observable');\nfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable_1.Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        }\n        else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    }\n    else if (isArrayLike_1.isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    }\n    else if (isPromise_1.isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) { return destination.error(err); })\n            .then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root_1.root.setTimeout(function () { throw err; });\n        });\n        return destination;\n    }\n    else if (result && typeof result[iterator_1.iterator] === 'function') {\n        var iterator = result[iterator_1.iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    }\n    else if (result && typeof result[observable_1.observable] === 'function') {\n        var obs = result[observable_1.observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        var value = isObject_1.isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = (\"You provided \" + value + \" where a stream was expected.\")\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\nexports.subscribeToResult = subscribeToResult;\n//# sourceMappingURL=subscribeToResult.js.map","\"use strict\";\nvar Observable_1 = require('../Observable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar isScheduler_1 = require('../util/isScheduler');\nvar mergeAll_1 = require('../operators/mergeAll');\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler_1.isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {\n        return observables[0];\n    }\n    return mergeAll_1.mergeAll(concurrent)(new ArrayObservable_1.ArrayObservable(observables, scheduler));\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nfunction isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\nexports.isScheduler = isScheduler;\n//# sourceMappingURL=isScheduler.js.map","\"use strict\";\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map","\"use strict\";\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nexports.isObject = isObject;\n//# sourceMappingURL=isObject.js.map","\"use strict\";\nvar errorObject_1 = require('./errorObject');\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject_1.errorObject.e = e;\n        return errorObject_1.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nexports.tryCatch = tryCatch;\n;\n//# sourceMappingURL=tryCatch.js.map","\"use strict\";\nexports.empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nvar Symbol = root_1.root.Symbol;\nexports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexports.$$rxSubscriber = exports.rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.observable = getSymbolObservable(root_1.root);\n/**\n * @deprecated use observable instead\n */\nexports.$$observable = exports.observable;\n//# sourceMappingURL=observable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar EmptyObservable = (function (_super) {\n    __extends(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following to the console:\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\n     * // x will occur every 1000ms\n     * // if x % 2 is equal to 1 print abc\n     * // if x % 2 is not equal to 1 nothing will be output\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    /** @deprecated internal use only */ EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        }\n        else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable_1.Observable));\nexports.EmptyObservable = EmptyObservable;\n//# sourceMappingURL=EmptyObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nexports.mergeMap = mergeMap;\nvar MergeMapOperator = (function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexports.MergeMapOperator = MergeMapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = (function (_super) {\n    __extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapSubscriber = MergeMapSubscriber;\n//# sourceMappingURL=mergeMap.js.map","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","\"use strict\";\nvar Subscriber_1 = require('../Subscriber');\nvar rxSubscriber_1 = require('../symbol/rxSubscriber');\nvar Observer_1 = require('../Observer');\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber(Observer_1.empty);\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nexports.toSubscriber = toSubscriber;\n//# sourceMappingURL=toSubscriber.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = (function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\nexports.UnsubscriptionError = UnsubscriptionError;\n//# sourceMappingURL=UnsubscriptionError.js.map","\"use strict\";\nvar noop_1 = require('./noop');\n/* tslint:enable:max-line-length */\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexports.pipe = pipe;\n/* @internal */\nfunction pipeFromArray(fns) {\n    if (!fns) {\n        return noop_1.noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\nexports.pipeFromArray = pipeFromArray;\n//# sourceMappingURL=pipe.js.map","\"use strict\";\n/* tslint:disable:no-empty */\nfunction noop() { }\nexports.noop = noop;\n//# sourceMappingURL=noop.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar map_1 = require('../operators/map');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return map_1.map(project, thisArg)(this);\n}\nexports.map = map;\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexports.map = map;\nvar MapOperator = (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexports.MapOperator = MapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = (function (_super) {\n    __extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar filter_1 = require('../../operator/filter');\nObservable_1.Observable.prototype.filter = filter_1.filter;\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar filter_1 = require('../operators/filter');\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return filter_1.filter(predicate, thisArg)(this);\n}\nexports.filter = filter;\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nexports.filter = filter;\nvar FilterOperator = (function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = (function (_super) {\n    __extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar catch_1 = require('../../operator/catch');\nObservable_1.Observable.prototype.catch = catch_1._catch;\nObservable_1.Observable.prototype._catch = catch_1._catch;\n//# sourceMappingURL=catch.js.map","\"use strict\";\nvar catchError_1 = require('../operators/catchError');\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nfunction _catch(selector) {\n    return catchError_1.catchError(selector)(this);\n}\nexports._catch = _catch;\n//# sourceMappingURL=catch.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nfunction catchError(selector) {\n    return function catchErrorOperatorFunction(source) {\n        var operator = new CatchOperator(selector);\n        var caught = source.lift(operator);\n        return (operator.caught = caught);\n    };\n}\nexports.catchError = catchError;\nvar CatchOperator = (function () {\n    function CatchOperator(selector) {\n        this.selector = selector;\n    }\n    CatchOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    };\n    return CatchOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CatchSubscriber = (function (_super) {\n    __extends(CatchSubscriber, _super);\n    function CatchSubscriber(destination, selector, caught) {\n        _super.call(this, destination);\n        this.selector = selector;\n        this.caught = caught;\n    }\n    // NOTE: overriding `error` instead of `_error` because we don't want\n    // to have this flag this subscriber as `isStopped`. We can mimic the\n    // behavior of the RetrySubscriber (from the `retry` operator), where\n    // we unsubscribe from our source chain, reset our Subscriber flags,\n    // then subscribe to the selector result.\n    CatchSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var result = void 0;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err2) {\n                _super.prototype.error.call(this, err2);\n                return;\n            }\n            this._unsubscribeAndRecycle();\n            this.add(subscribeToResult_1.subscribeToResult(this, result));\n        }\n    };\n    return CatchSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=catchError.js.map","\"use strict\";\nexports.isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArrayLike.js.map","\"use strict\";\nfunction isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\nexports.isPromise = isPromise;\n//# sourceMappingURL=isPromise.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nfunction symbolIteratorPonyfill(root) {\n    var Symbol = root.Symbol;\n    if (typeof Symbol === 'function') {\n        if (!Symbol.iterator) {\n            Symbol.iterator = Symbol('iterator polyfill');\n        }\n        return Symbol.iterator;\n    }\n    else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nexports.symbolIteratorPonyfill = symbolIteratorPonyfill;\nexports.iterator = symbolIteratorPonyfill(root_1.root);\n/**\n * @deprecated use iterator instead\n */\nexports.$$iterator = exports.iterator;\n//# sourceMappingURL=iterator.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = (function (_super) {\n    __extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber_1.Subscriber));\nexports.InnerSubscriber = InnerSubscriber;\n//# sourceMappingURL=InnerSubscriber.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar scan_1 = require('../../operator/scan');\nObservable_1.Observable.prototype.scan = scan_1.scan;\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar scan_1 = require('../operators/scan');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    if (arguments.length >= 2) {\n        return scan_1.scan(accumulator, seed)(this);\n    }\n    return scan_1.scan(accumulator)(this);\n}\nexports.scan = scan;\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    var hasSeed = false;\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nexports.scan = scan;\nvar ScanOperator = (function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) { hasSeed = false; }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ScanSubscriber = (function (_super) {\n    __extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this._seed = _seed;\n        this.hasSeed = hasSeed;\n        this.index = 0;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar do_1 = require('../../operator/do');\nObservable_1.Observable.prototype.do = do_1._do;\nObservable_1.Observable.prototype._do = do_1._do;\n//# sourceMappingURL=do.js.map","\"use strict\";\nvar tap_1 = require('../operators/tap');\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nfunction _do(nextOrObserver, error, complete) {\n    return tap_1.tap(nextOrObserver, error, complete)(this);\n}\nexports._do = _do;\n//# sourceMappingURL=do.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nfunction tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nexports.tap = tap;\nvar DoOperator = (function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DoSubscriber = (function (_super) {\n    __extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        _super.call(this, destination);\n        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        this.add(safeSubscriber);\n        this.safeSubscriber = safeSubscriber;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=tap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar merge_1 = require('../../operator/merge');\nObservable_1.Observable.prototype.merge = merge_1.merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar merge_1 = require('../operators/merge');\nvar merge_2 = require('../observable/merge');\nexports.mergeStatic = merge_2.merge;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return merge_1.merge.apply(void 0, observables)(this);\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar merge_1 = require('../observable/merge');\nvar merge_2 = require('../observable/merge');\nexports.mergeStatic = merge_2.merge;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(merge_1.merge.apply(void 0, [source].concat(observables))); };\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isScheduler_1 = require('../util/isScheduler');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayObservable = (function (_super) {\n    __extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable_1.EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable_1.Observable));\nexports.ArrayObservable = ArrayObservable;\n//# sourceMappingURL=ArrayObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ScalarObservable = (function (_super) {\n    __extends(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        _super.call(this);\n        this.value = value;\n        this.scheduler = scheduler;\n        this._isScalar = true;\n        if (scheduler) {\n            this._isScalar = false;\n        }\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done, value = state.value, subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable_1.Observable));\nexports.ScalarObservable = ScalarObservable;\n//# sourceMappingURL=ScalarObservable.js.map","\"use strict\";\nvar mergeMap_1 = require('./mergeMap');\nvar identity_1 = require('../util/identity');\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMap_1.mergeMap(identity_1.identity, null, concurrent);\n}\nexports.mergeAll = mergeAll;\n//# sourceMappingURL=mergeAll.js.map","\"use strict\";\nfunction identity(x) {\n    return x;\n}\nexports.identity = identity;\n//# sourceMappingURL=identity.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatMap_1 = require('../../operator/concatMap');\nObservable_1.Observable.prototype.concatMap = concatMap_1.concatMap;\n//# sourceMappingURL=concatMap.js.map","\"use strict\";\nvar concatMap_1 = require('../operators/concatMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nfunction concatMap(project, resultSelector) {\n    return concatMap_1.concatMap(project, resultSelector)(this);\n}\nexports.concatMap = concatMap;\n//# sourceMappingURL=concatMap.js.map","\"use strict\";\nvar mergeMap_1 = require('./mergeMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nfunction concatMap(project, resultSelector) {\n    return mergeMap_1.mergeMap(project, resultSelector, 1);\n}\nexports.concatMap = concatMap;\n//# sourceMappingURL=concatMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeUntil_1 = require('../../operator/takeUntil');\nObservable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;\n//# sourceMappingURL=takeUntil.js.map","\"use strict\";\nvar takeUntil_1 = require('../operators/takeUntil');\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return takeUntil_1.takeUntil(notifier)(this);\n}\nexports.takeUntil = takeUntil;\n//# sourceMappingURL=takeUntil.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nexports.takeUntil = takeUntil;\nvar TakeUntilOperator = (function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = (function (_super) {\n    __extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=takeUntil.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar first_1 = require('../../operator/first');\nObservable_1.Observable.prototype.first = first_1.first;\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar first_1 = require('../operators/first');\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return first_1.first(predicate, resultSelector, defaultValue)(this);\n}\nexports.first = first;\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return function (source) { return source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source)); };\n}\nexports.first = first;\nvar FirstOperator = (function () {\n    function FirstOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    FirstOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return FirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FirstSubscriber = (function (_super) {\n    __extends(FirstSubscriber, _super);\n    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n        this.index = 0;\n        this.hasCompleted = false;\n        this._emitted = false;\n    }\n    FirstSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._emit = function (value, index) {\n        if (this.resultSelector) {\n            this._tryResultSelector(value, index);\n            return;\n        }\n        this._emitFinal(value);\n    };\n    FirstSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this._emitFinal(result);\n    };\n    FirstSubscriber.prototype._emitFinal = function (value) {\n        var destination = this.destination;\n        if (!this._emitted) {\n            this._emitted = true;\n            destination.next(value);\n            destination.complete();\n            this.hasCompleted = true;\n        }\n    };\n    FirstSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n            destination.next(this.defaultValue);\n            destination.complete();\n        }\n        else if (!this.hasCompleted) {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return FirstSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nvar EmptyError = (function (_super) {\n    __extends(EmptyError, _super);\n    function EmptyError() {\n        var err = _super.call(this, 'no elements in sequence');\n        this.name = err.name = 'EmptyError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return EmptyError;\n}(Error));\nexports.EmptyError = EmptyError;\n//# sourceMappingURL=EmptyError.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar elementAt_1 = require('../../operator/elementAt');\nObservable_1.Observable.prototype.elementAt = elementAt_1.elementAt;\n//# sourceMappingURL=elementAt.js.map","\"use strict\";\nvar elementAt_1 = require('../operators/elementAt');\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nfunction elementAt(index, defaultValue) {\n    return elementAt_1.elementAt(index, defaultValue)(this);\n}\nexports.elementAt = elementAt;\n//# sourceMappingURL=elementAt.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nfunction elementAt(index, defaultValue) {\n    return function (source) { return source.lift(new ElementAtOperator(index, defaultValue)); };\n}\nexports.elementAt = elementAt;\nvar ElementAtOperator = (function () {\n    function ElementAtOperator(index, defaultValue) {\n        this.index = index;\n        this.defaultValue = defaultValue;\n        if (index < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    ElementAtOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n    };\n    return ElementAtOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ElementAtSubscriber = (function (_super) {\n    __extends(ElementAtSubscriber, _super);\n    function ElementAtSubscriber(destination, index, defaultValue) {\n        _super.call(this, destination);\n        this.index = index;\n        this.defaultValue = defaultValue;\n    }\n    ElementAtSubscriber.prototype._next = function (x) {\n        if (this.index-- === 0) {\n            this.destination.next(x);\n            this.destination.complete();\n        }\n    };\n    ElementAtSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index >= 0) {\n            if (typeof this.defaultValue !== 'undefined') {\n                destination.next(this.defaultValue);\n            }\n            else {\n                destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError);\n            }\n        }\n        destination.complete();\n    };\n    return ElementAtSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=elementAt.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nvar ArgumentOutOfRangeError = (function (_super) {\n    __extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var err = _super.call(this, 'argument out of range');\n        this.name = err.name = 'ArgumentOutOfRangeError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ArgumentOutOfRangeError;\n}(Error));\nexports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar empty_1 = require('../../observable/empty');\nObservable_1.Observable.empty = empty_1.empty;\n//# sourceMappingURL=empty.js.map","\"use strict\";\nvar EmptyObservable_1 = require('./EmptyObservable');\nexports.empty = EmptyObservable_1.EmptyObservable.create;\n//# sourceMappingURL=empty.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromEvent_1 = require('../../observable/fromEvent');\nObservable_1.Observable.fromEvent = fromEvent_1.fromEvent;\n//# sourceMappingURL=fromEvent.js.map","\"use strict\";\nvar FromEventObservable_1 = require('./FromEventObservable');\nexports.fromEvent = FromEventObservable_1.FromEventObservable.create;\n//# sourceMappingURL=fromEvent.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar isFunction_1 = require('../util/isFunction');\nvar errorObject_1 = require('../util/errorObject');\nvar Subscription_1 = require('../Subscription');\nvar toString = Object.prototype.toString;\nfunction isNodeStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isNodeList(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\nfunction isHTMLCollection(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\nfunction isEventTarget(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventObservable = (function (_super) {\n    __extends(FromEventObservable, _super);\n    function FromEventObservable(sourceObj, eventName, selector, options) {\n        _super.call(this);\n        this.sourceObj = sourceObj;\n        this.eventName = eventName;\n        this.selector = selector;\n        this.options = options;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Creates an Observable that emits events of a specific type coming from the\n     * given event target.\n     *\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n     * EventEmitter events or others.</span>\n     *\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n     *\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\n     * for registering event handler functions. As a second argument it takes string that indicates\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n     * which are described in detail below. If your event target does not match any of the ones listed,\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n     * handler functions have different names, but they all accept a string describing event type\n     * and function itself, which will be called whenever said event happens.\n     *\n     * Every time resulting Observable is subscribed, event handler function will be registered\n     * to event target on given event type. When that event fires, value\n     * passed as a first argument to registered function will be emitted by output Observable.\n     * When Observable is unsubscribed, function will be unregistered from event target.\n     *\n     * Note that if event target calls registered function with more than one argument, second\n     * and following arguments will not appear in resulting stream. In order to get access to them,\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\n     * passed to event handler. Output Observable will then emit value returned by project function,\n     * instead of the usual value.\n     *\n     * Remember that event targets listed below are checked via duck typing. It means that\n     * no matter what kind of object you have and no matter what environment you work in,\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\n     * of course they behave as was described above). So for example if Node.js library exposes\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n     * a good choice.\n     *\n     * If the API you use is more callback then event handler oriented (subscribed\n     * callback function fires only once and thus there is no need to manually\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n     * instead.\n     *\n     * `fromEvent` supports following types of event targets:\n     *\n     * **DOM EventTarget**\n     *\n     * This is an object with `addEventListener` and `removeEventListener` methods.\n     *\n     * In the browser, `addEventListener` accepts - apart from event type string and event\n     * handler function arguments - optional third parameter, which is either an object or boolean,\n     * both used for additional configuration how and when passed function will be called. When\n     * `fromEvent` is used with event target of that type, you can provide this values\n     * as third parameter as well.\n     *\n     * **Node.js EventEmitter**\n     *\n     * An object with `addListener` and `removeListener` methods.\n     *\n     * **JQuery-style event target**\n     *\n     * An object with `on` and `off` methods\n     *\n     * **DOM NodeList**\n     *\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n     *\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n     * it contains and install event handler function in every of them. When returned Observable\n     * is unsubscribed, function will be removed from all Nodes.\n     *\n     * **DOM HtmlCollection**\n     *\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n     * installed and removed in each of elements.\n     *\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\n     * clicks.subscribe(x => console.log(x));\n     *\n     * // Results in:\n     * // MouseEvent object logged to console every time a click\n     * // occurs on the document.\n     *\n     *\n     * @example <caption>Use addEventListener with capture option</caption>\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n     *                                                                          // which will be passed to addEventListener\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n     *\n     * clicksInDocument.subscribe(() => console.log('document'));\n     * clicksInDiv.subscribe(() => console.log('div'));\n     *\n     * // By default events bubble UP in DOM tree, so normally\n     * // when we would click on div in document\n     * // \"div\" would be logged first and then \"document\".\n     * // Since we specified optional `capture` option, document\n     * // will catch event when it goes DOWN DOM tree, so console\n     * // will log \"document\" and then \"div\".\n     *\n     * @see {@link bindCallback}\n     * @see {@link bindNodeCallback}\n     * @see {@link fromEventPattern}\n     *\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n     * @param {string} eventName The event name of interest, being emitted by the\n     * `target`.\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEvent\n     * @owner Observable\n     */\n    FromEventObservable.create = function (target, eventName, options, selector) {\n        if (isFunction_1.isFunction(options)) {\n            selector = options;\n            options = undefined;\n        }\n        return new FromEventObservable(target, eventName, selector, options);\n    };\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n        var unsubscribe;\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n            }\n        }\n        else if (isEventTarget(sourceObj)) {\n            var source_1 = sourceObj;\n            sourceObj.addEventListener(eventName, handler, options);\n            unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };\n        }\n        else if (isJQueryStyleEventEmitter(sourceObj)) {\n            var source_2 = sourceObj;\n            sourceObj.on(eventName, handler);\n            unsubscribe = function () { return source_2.off(eventName, handler); };\n        }\n        else if (isNodeStyleEventEmitter(sourceObj)) {\n            var source_3 = sourceObj;\n            sourceObj.addListener(eventName, handler);\n            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\n        }\n        else {\n            throw new TypeError('Invalid event target');\n        }\n        subscriber.add(new Subscription_1.Subscription(unsubscribe));\n    };\n    /** @deprecated internal use only */ FromEventObservable.prototype._subscribe = function (subscriber) {\n        var sourceObj = this.sourceObj;\n        var eventName = this.eventName;\n        var options = this.options;\n        var selector = this.selector;\n        var handler = selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);\n            if (result === errorObject_1.errorObject) {\n                subscriber.error(errorObject_1.errorObject.e);\n            }\n            else {\n                subscriber.next(result);\n            }\n        } : function (e) { return subscriber.next(e); };\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n    };\n    return FromEventObservable;\n}(Observable_1.Observable));\nexports.FromEventObservable = FromEventObservable;\n//# sourceMappingURL=FromEventObservable.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timer_1 = require('../../observable/timer');\nObservable_1.Observable.timer = timer_1.timer;\n//# sourceMappingURL=timer.js.map","\"use strict\";\nvar TimerObservable_1 = require('./TimerObservable');\nexports.timer = TimerObservable_1.TimerObservable.create;\n//# sourceMappingURL=timer.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\nvar isScheduler_1 = require('../util/isScheduler');\nvar isDate_1 = require('../util/isDate');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar TimerObservable = (function (_super) {\n    __extends(TimerObservable, _super);\n    function TimerObservable(dueTime, period, scheduler) {\n        if (dueTime === void 0) { dueTime = 0; }\n        _super.call(this);\n        this.period = -1;\n        this.dueTime = 0;\n        if (isNumeric_1.isNumeric(period)) {\n            this.period = Number(period) < 1 && 1 || Number(period);\n        }\n        else if (isScheduler_1.isScheduler(period)) {\n            scheduler = period;\n        }\n        if (!isScheduler_1.isScheduler(scheduler)) {\n            scheduler = async_1.async;\n        }\n        this.scheduler = scheduler;\n        this.dueTime = isDate_1.isDate(dueTime) ?\n            (+dueTime - this.scheduler.now()) :\n            dueTime;\n    }\n    /**\n     * Creates an Observable that starts emitting after an `initialDelay` and\n     * emits ever increasing numbers after each `period` of time thereafter.\n     *\n     * <span class=\"informal\">Its like {@link interval}, but you can specify when\n     * should the emissions start.</span>\n     *\n     * <img src=\"./img/timer.png\" width=\"100%\">\n     *\n     * `timer` returns an Observable that emits an infinite sequence of ascending\n     * integers, with a constant interval of time, `period` of your choosing\n     * between those emissions. The first emission happens after the specified\n     * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n     * operator uses the `async` IScheduler to provide a notion of time, but you\n     * may pass any IScheduler to it. If `period` is not specified, the output\n     * Observable emits only one value, `0`. Otherwise, it emits an infinite\n     * sequence.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n     * var numbers = Rx.Observable.timer(3000, 1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @example <caption>Emits one number after five seconds</caption>\n     * var numbers = Rx.Observable.timer(5000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link interval}\n     * @see {@link delay}\n     *\n     * @param {number|Date} initialDelay The initial delay time to wait before\n     * emitting the first value of `0`.\n     * @param {number} [period] The period of time between emissions of the\n     * subsequent numbers.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a `0` after the\n     * `initialDelay` and ever increasing numbers after each `period` of time\n     * thereafter.\n     * @static true\n     * @name timer\n     * @owner Observable\n     */\n    TimerObservable.create = function (initialDelay, period, scheduler) {\n        if (initialDelay === void 0) { initialDelay = 0; }\n        return new TimerObservable(initialDelay, period, scheduler);\n    };\n    TimerObservable.dispatch = function (state) {\n        var index = state.index, period = state.period, subscriber = state.subscriber;\n        var action = this;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        else if (period === -1) {\n            return subscriber.complete();\n        }\n        state.index = index + 1;\n        action.schedule(state, period);\n    };\n    /** @deprecated internal use only */ TimerObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;\n        return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n            index: index, period: period, subscriber: subscriber\n        });\n    };\n    return TimerObservable;\n}(Observable_1.Observable));\nexports.TimerObservable = TimerObservable;\n//# sourceMappingURL=TimerObservable.js.map","\"use strict\";\nvar isArray_1 = require('../util/isArray');\nfunction isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\nexports.isNumeric = isNumeric;\n;\n//# sourceMappingURL=isNumeric.js.map","\"use strict\";\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);\n//# sourceMappingURL=async.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Action_1 = require('./Action');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = (function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.pending = false;\n        this.work = work;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root_1.root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    /** @deprecated internal use only */ AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action_1.Action));\nexports.AsyncAction = AsyncAction;\n//# sourceMappingURL=AsyncAction.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = (function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return this;\n    };\n    return Action;\n}(Subscription_1.Subscription));\nexports.Action = Action;\n//# sourceMappingURL=Action.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Scheduler_1 = require('../Scheduler');\nvar AsyncScheduler = (function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler_1.Scheduler));\nexports.AsyncScheduler = AsyncScheduler;\n//# sourceMappingURL=AsyncScheduler.js.map","\"use strict\";\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexports.Scheduler = Scheduler;\n//# sourceMappingURL=Scheduler.js.map","\"use strict\";\nfunction isDate(value) {\n    return value instanceof Date && !isNaN(+value);\n}\nexports.isDate = isDate;\n//# sourceMappingURL=isDate.js.map","import { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/scan';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/merge';\nimport 'rxjs/add/operator/concatMap';\nimport 'rxjs/add/operator/takeUntil';\nimport 'rxjs/add/operator/first';\nimport 'rxjs/add/operator/elementAt';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/timer';\n\nexport default function getDragObservables(domItem) {\n    const preventDefault = event => {\n        return event.preventDefault();\n    };\n    const mouseEventToCoordinate = mouseEvent => {\n        preventDefault(mouseEvent);\n        return { x: mouseEvent.clientX, y: mouseEvent.clientY };\n    };\n    const touchEventToCoordinate = touchEvent => {\n        preventDefault(touchEvent);\n        return {\n            x: touchEvent.changedTouches[0].clientX,\n            y: touchEvent.changedTouches[0].clientY\n        };\n    };\n\n    let mouseDowns = Observable.fromEvent(domItem, 'mousedown').map(\n        mouseEventToCoordinate\n    );\n    let mouseMoves = Observable.fromEvent(window, 'mousemove').map(\n        mouseEventToCoordinate\n    );\n    let mouseUps = Observable.fromEvent(window, 'mouseup').map(\n        mouseEventToCoordinate\n    );\n\n    let touchStarts = Observable.fromEvent(domItem, 'touchstart').map(\n        touchEventToCoordinate\n    );\n    let touchMoves = Observable.fromEvent(domItem, 'touchmove').map(\n        touchEventToCoordinate\n    );\n    let touchEnds = Observable.fromEvent(window, 'touchend').map(\n        touchEventToCoordinate\n    );\n    let touchCancels = Observable.fromEvent(window, 'touchcancel').map(\n        touchEventToCoordinate\n    );\n\n    let _starts = mouseDowns.merge(touchStarts);\n    let _moves = mouseMoves.merge(touchMoves);\n    let _ends = mouseUps.merge(touchEnds).merge(touchCancels);\n\n    const HOLDING_PERIOD = 500; // milliseconds\n\n    // Clicks: Take the start-end pairs only if no more than 3 move events happen in between, and the end event is within the holding period\n    let clicks = _starts.concatMap(() =>\n        _ends\n            .first()\n            .takeUntil(_moves.elementAt(3))\n            .takeUntil(Observable.timer(HOLDING_PERIOD))\n            .catch(() => Observable.empty())\n    );\n\n    // Holds: Take those starts where no end event and no more than 3 move event occurs during the holding period\n    let holds = _starts.concatMap(dragStartEvent =>\n        Observable.timer(HOLDING_PERIOD)\n            .takeUntil(_moves.elementAt(3))\n            .takeUntil(_ends)\n            .map(() => ({ x: dragStartEvent.x, y: dragStartEvent.y }))\n            .catch(() => Observable.empty())\n    );\n\n    // Move starts with direction: Pair the move start events with the 3rd subsequent move event,\n    // but only if it happens during the holdign period and no end event happens in between\n    let moveStartsWithDirection = _starts.concatMap(dragStartEvent =>\n        _moves\n            .takeUntil(_ends)\n            .takeUntil(Observable.timer(HOLDING_PERIOD))\n            .elementAt(3)\n            .catch(() => Observable.empty())\n            .map(dragEvent => {\n                const intialDeltaX = dragEvent.x - dragStartEvent.x;\n                const initialDeltaY = dragEvent.y - dragStartEvent.y;\n                return {\n                    x: dragStartEvent.x,\n                    y: dragStartEvent.y,\n                    intialDeltaX,\n                    initialDeltaY\n                };\n            })\n    );\n\n    // Vertical move starts: Keep only those move start events where the 3rd subsequent move event is rather vertical than horizontal\n    let verticalMoveStarts = moveStartsWithDirection.filter(\n        dragStartEvent =>\n            Math.abs(dragStartEvent.intialDeltaX) <\n            Math.abs(dragStartEvent.initialDeltaY)\n    );\n\n    // Horizontal move starts: Keep only those move start events where the 3rd subsequent move event is rather horizontal than vertical\n    let horizontalMoveStarts = moveStartsWithDirection.filter(\n        dragStartEvent =>\n            Math.abs(dragStartEvent.intialDeltaX) >=\n            Math.abs(dragStartEvent.initialDeltaY)\n    );\n\n    // Take the moves until an end occurs\n    const movesUntilEnds = dragStartEvent =>\n        _moves.takeUntil(_ends).map(dragEvent => {\n            const x = dragEvent.x - dragStartEvent.x;\n            const y = dragEvent.y - dragStartEvent.y;\n            return { x, y };\n        });\n\n    let verticalMoves = verticalMoveStarts.concatMap(movesUntilEnds);\n    let horizontalMoves = horizontalMoveStarts.concatMap(movesUntilEnds);\n    let dragMoves = holds.concatMap(movesUntilEnds);\n\n    const fastMoveAtEnds = dragStartEvent =>\n        _ends\n            .first()\n            .takeUntil(Observable.timer(HOLDING_PERIOD))\n            .map(dragEndEvent => {\n                const x = dragEndEvent.x - dragStartEvent.x;\n                const y = dragEndEvent.y - dragStartEvent.y;\n                return { x, y };\n            });\n\n    const lastMovesAtEnds = dragStartEvent =>\n        _ends.first().map(dragEndEvent => {\n            const x = dragEndEvent.x - dragStartEvent.x;\n            const y = dragEndEvent.y - dragStartEvent.y;\n            return { x, y };\n        });\n\n    // let ends = _starts.concatMap(lastMovesAtEnds);\n    let verticalMoveEnds = verticalMoveStarts.concatMap(lastMovesAtEnds);\n    let horizontalMoveEnds = horizontalMoveStarts.concatMap(lastMovesAtEnds);\n    let dragMoveEnds = holds.concatMap(lastMovesAtEnds);\n    let verticalSwipe = verticalMoveStarts.concatMap(fastMoveAtEnds);\n    let horizontalSwipe = horizontalMoveStarts.concatMap(fastMoveAtEnds);\n\n    return {\n        clicks,\n        holds,\n        verticalMoveStarts,\n        horizontalMoveStarts,\n        verticalMoves,\n        horizontalMoves,\n        verticalMoveEnds,\n        horizontalMoveEnds,\n        dragMoves,\n        dragMoveEnds,\n        verticalSwipe,\n        horizontalSwipe\n    };\n}\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport gestureObserver from '../../utils/gesture';\nimport './index.less';\n\nclass Ruler extends PureComponent {\n    static propTypes = {\n        value: PropTypes.number,\n        start: PropTypes.number,\n        end: PropTypes.number,\n        step: PropTypes.number,\n        onDrag: PropTypes.func,\n        className: PropTypes.string\n    };\n\n    constructor(props) {\n        super(props);\n        this.startPercentage = 0;\n        this.containerWidth = 0;\n        this.state = {\n            initialPosition: 0,\n            initialPercentage: 0,\n            percentage: 0.0,\n            offsetWidth: 0\n        };\n    }\n\n    componentDidMount() {\n        // this.registerDragListener();\n        this.transform();\n    }\n\n    componentWillReceiveProps(nextProps) {\n        const { start, end } = this.props;\n        if ('value' in nextProps) {\n            let value = nextProps.value;\n            if (value < start) {\n                value = start;\n            } else if (value > end) {\n                value = end;\n            }\n            this.transform(value);\n        }\n    }\n\n    transform = offsetWidth => {\n        const { start, end, value } = this.props;\n        const left = offsetWidth || value;\n        const percentage = (left - start) / (end - start);\n        this.setState({ percentage: Math.max(percentage, 0.0001) });\n    };\n\n    tranformScore = dragVal => {\n        const { start, end, onDrag } = this.props;\n        let value = Math.round(\n            ((end - start) * dragVal) / this.containerWidth + start\n        );\n        if (value < start) {\n            value = start;\n        } else if (value > end) {\n            value = end;\n        }\n        this.setState({ value });\n        onDrag(value);\n    };\n\n    registerDragListener = () => {\n        const { point, ruler } = this;\n\n        const width = ruler.offsetWidth;\n        this.containerWidth = width;\n\n        const dragObserver = gestureObserver(point);\n\n        const dragStart = ({ x }) => {\n            this.startPercentage = this.state.percentage;\n\n            this.onDragStart(x);\n        };\n\n        const dragMoves = ({ x }) => {\n            let currPercentage = this.startPercentage + x / width;\n\n            if (currPercentage > 0.99) {\n                currPercentage = 0.9999;\n            }\n\n            this.setState(\n                {\n                    percentage: Math.max(currPercentage, 0.0001),\n                    offsetWidth: currPercentage * width\n                },\n                () => this.onDrag(this.state.offsetWidth)\n            );\n        };\n\n        const dragEnds = () => {\n            this.startPercentage = 0;\n            this.onDragEnd(this.state.percentage);\n        };\n\n        dragObserver.horizontalMoveStarts.forEach(dragStart);\n\n        dragObserver.holds.forEach(dragStart);\n\n        dragObserver.dragMoves.forEach(dragMoves);\n\n        dragObserver.dragMoveEnds.forEach(dragEnds);\n\n        dragObserver.horizontalMoves.forEach(dragMoves);\n\n        dragObserver.horizontalMoveEnds.forEach(dragEnds);\n\n        const barClickObserver = gestureObserver(ruler);\n\n        const barClick = ({ x }) => {\n            const wrapperLeft = ruler.getBoundingClientRect().left;\n            let currPercentage = (x - wrapperLeft) / width;\n            console.log(x - wrapperLeft);\n            if (currPercentage < 0) currPercentage = 0.0001;\n            this.setState(\n                {\n                    percentage: currPercentage,\n                    offsetWidth: currPercentage * width\n                },\n                () => this.onDrag(this.state.offsetWidth)\n            );\n        };\n\n        barClickObserver.clicks.forEach(barClick);\n    };\n\n    onDragStart = x => {};\n\n    onDrag = x => {\n        this.tranformScore(x);\n    };\n\n    onDragEnd = x => {};\n\n    renderRuler = () => {\n        const { start, end, step } = this.props;\n        const stepWidth = (100 * step) / (end - start);\n        let ruleDom = [];\n        let ruleDiv;\n        for (let i = start; i < end + step; i += step) {\n            if (i % 10 === 0 || i === end || (step === 1 && i % 5 === 0)) {\n                ruleDiv = (\n                    <div\n                        key={i}\n                        className=\"rule-mark\"\n                        style={\n                            i === end + 1 || i === end\n                                ? {}\n                                : { width: `${stepWidth}%` }\n                        }\n                    >\n                        <div className=\"line-text\">\n                            {i === end + 1 ? end : i}\n                        </div>\n                        <div className=\"line\" />\n                    </div>\n                );\n            } else {\n                ruleDiv = (\n                    <span\n                        key={i}\n                        className=\"line\"\n                        style={{ width: `${stepWidth}%` }}\n                    />\n                );\n            }\n            ruleDom.push(ruleDiv);\n        }\n        return ruleDom;\n    };\n\n    mouseListener = e => {\n        const { initialPosition, initialPercentage } = this.state;\n        const { ruler } = this;\n        const width = ruler.offsetWidth;\n        const diff = e.clientX - initialPosition;\n        let currPercentage = initialPercentage + (100 / width) * (0.01 * diff);\n        console.log((100 / width) * (0.01 * diff));\n        if (currPercentage > 0.99) {\n            currPercentage = 0.9999;\n        }\n\n        if (currPercentage < 0) {\n            currPercentage = 0.0001;\n        }\n\n        this.setState({\n            percentage: currPercentage\n        });\n    };\n\n    addMouseListener = e => {\n        const { percentage } = this.state;\n        this.setState(\n            { initialPosition: e.clientX, initialPercentage: percentage },\n            () => window.addEventListener('mousemove', this.mouseListener)\n        );\n    };\n\n    removeMouseListener = () => {\n        window.removeEventListener('mousemove', this.mouseListener);\n    };\n\n    render() {\n        const { percentage } = this.state;\n        const { start, value } = this.props;\n        return (\n            <div className=\"react-ruler-wrapper\">\n                <div className=\"ruler-container\">\n                    <div\n                        className=\"ruler-wrapper\"\n                        ref={list => {\n                            this.ruler = list;\n                        }}\n                    >\n                        <div className=\"ruler-list\">{this.renderRuler()}</div>\n                        <div\n                            className=\"ruler-drag\"\n                            style={{\n                                transform: `scaleX(${percentage})`\n                            }}\n                        >\n                            <div\n                                className=\"ruler-point\"\n                                ref={ref => {\n                                    this.point = ref;\n                                }}\n                                style={{\n                                    transform: `scaleX(${1 / percentage})`\n                                }}\n                                onMouseDown={this.addMouseListener}\n                                onMouseUp={this.removeMouseListener}\n                                onMouseLeave={this.removeMouseListener}\n                            >\n                                <div className=\"point\">{value || start}</div>\n                                <div className=\"ruler-line\" />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Ruler;\n"],"sourceRoot":""}